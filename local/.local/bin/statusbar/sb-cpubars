#!/bin/sh
# sb-cpubars: Muestra la carga de la CPU como barras animadas.
#
# Versi√≥n corregida y optimizada para asegurar la actualizaci√≥n.

cache=/tmp/cpubarscache

case $BLOCK_BUTTON in
	2) setsid -f "$TERMINAL" -e htop ;;
	3) notify-send "ü™® M√≥dulo de Carga de CPU" "Cada barra representa la carga de un n√∫cleo del CPU.";;
	6) setsid -f "$TERMINAL" -e "$EDITOR" "$0" ;;
esac

# Asegurarse de que el archivo de cach√© exista
touch "$cache"

# El script awk procesa el archivo de cach√© y /proc/stat para calcular la carga
awk -v cachefile="$cache" '
    # Bloque BEGIN: Lee las estad√≠sticas antiguas del archivo de cach√©
    BEGIN {
        while ((getline line < cachefile) > 0) {
            if (line ~ /cpu[0-9]+/) {
                split(line, fields)
                id = fields[1]
                old_total[id] = fields[2] + fields[3] + fields[4] + fields[5]
                old_idle[id]  = fields[5]
            }
        }
        close(cachefile)
    }

    # Bloque principal: Procesa las nuevas estad√≠sticas de /proc/stat
    /cpu[0-9]+/ {
        stats_to_cache[FNR] = $0 # Guardar la l√≠nea para el nuevo cach√©
        total = $2 + $3 + $4 + $5
        idle = $5
        load = 0

        if ($1 in old_total) {
            diff_total = total - old_total[$1]
            diff_idle = idle - old_idle[$1]
            if (diff_total > 0) {
                load = (1 - diff_idle / diff_total) * 100
            }
        }

        level = int(load / 12.5)
        bars = " ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà"
        if (level > 7) level = 7
        if (level < 0) level = 0
        bar = substr(bars, level + 1, 1)
        output_bars = output_bars bar
    }

    # Bloque END: Imprime el resultado y actualiza el archivo de cach√©
    END {
        print "ü™®" output_bars
        for (i in stats_to_cache) {
            print stats_to_cache[i] > cachefile
        }
    }
' /proc/stat
